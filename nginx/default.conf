upstream client {
    server client:4000; # Replace with the actual container name or IP
    # Additional frontend servers can be added here
}

upstream api {
    server api:3001; # Replace with the actual container name or IP
    # Additional backend servers for service 2 can be added here
}

upstream broker {
    server broker:6379; # Replace with the actual container name or IP
    # Additional backend servers for service 2 can be added here
}

server {
    listen 80;
    #return 301 https://$host$request_uri;

    location / {
        proxy_pass http://client;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api {
        #rewrite ^/api/(.*) /$1 break;
        proxy_pass http://api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;   
    }

    location /broker {
        #rewrite ^/api/broker(.*) /$1 break;
        proxy_pass http://broker;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;   
    }
}

server {
    listen 443;
    # ssl                       on;

    # add_header                Strict-Transport-Security "max-age=31536000" always;

    # ssl_session_cache         shared:SSL:20m;
    # ssl_session_timeout       10m;

    # ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
    # ssl_prefer_server_ciphers on;
    # ssl_ciphers               "ECDH+AESGCM:ECDH+AES256:ECDH+AES128:!ADH:!AECDH:!MD5;";

    # ssl_stapling              on;
    # ssl_stapling_verify       on;
    # resolver                  8.8.8.8 8.8.4.4;

    # ssl_certificate           $SSL_CERT;
    # ssl_certificate_key       $SSL_CERT_KEY;
    # ssl_trusted_certificate   $SSL_TRUSTED_CERT;

    # access_log                /dev/stdout;
    # error_log                 /dev/stderr info;

    location / {
        proxy_pass https://client;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api {
        #rewrite ^/api/(.*) /$1 break;
        proxy_pass https://api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;   
    }

    location /broker {
        #rewrite ^/api/broker(.*) /$1 break;
        proxy_pass https://broker;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;   
    }
    # Additional server configuration for the web server can be added here
}
