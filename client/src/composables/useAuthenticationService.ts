import { auth } from 'src/boot/axios';
import { UserCredentials } from './types';

function getRandomHexString(chars: number) {
  const symbols = '0123456789abcdef';
  let result = '';
  for (let i = 0; i < chars; i++) {
    result += symbols[Math.floor(Math.random() * symbols.length)];
  }
  return result;
}

export const useAuthenticationService = () => {
  const auth_url = process.env.AUTH_ENDPOINT || auth.defaults.baseURL;
  const login = async (credentials: UserCredentials, redirect_uri: string) => {
    return await auth.post(auth_url + 'login', credentials, {
      params: {
        response_type: 'code',
        client_id: 'steamscraper_client',
        redirect_uri,
        state: getRandomHexString(16),
        code_challenge: getRandomHexString(64),
        code_challenge_method: 'S256',
      },
      withCredentials: true,
    });
  };

  const register = async (credentials: UserCredentials) => {
    return await auth.post(auth_url + 'login/signup', credentials);
  };

  return { login, register };
};

// response_type must be set to code
// client_id is the client identifier you received when you first created the application
// redirect_uri indicates the URL to return the user to after authorization is complete, such as org.example.app://redirect
// state is a random string generated by your application, which you’ll verify later
// code_challenge must match the The code challenge as generated below,
// code_challenge_method – Either plain or S256, depending on whether the challenge is the plain verifier string or the SHA256 hash of the string. If this parameter is omitted, the server will assume plain.
